/*
 * Copyright [2014] [Christian Loehnert, krampenschiesser@gmail.com]
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


apply plugin: "maven-publish"

task wrapper(type: Wrapper) {
    gradleVersion = "2.9"
}

allprojects {
    apply plugin: "java"
    group = "de.ks"
    version = "$version"

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    repositories {
        mavenCentral()
        maven {
            url = "http://repository.jboss.org/nexus/content/groups/public"
        }
        maven {
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
    }

    sourceSets {
        main {
            output.resourcesDir = "build/classes/main"
        }
        test {
            output.resourcesDir = "build/classes/test"
        }
    }

    configurations {
        asciidoclet
    }

    dependencies {
        asciidoclet "org.asciidoctor:asciidoclet:$asciidocJavaIntegration"

        compile "com.google.code.findbugs:jsr305:$jsr305"
        compile "org.slf4j:slf4j-api:$slf4j"

        testCompile "junit:junit:$junit"
        testCompile("org.mockito:mockito-core:$mockito") {
            exclude module: "objenesis"
        }
        testCompile "org.hamcrest:hamcrest-all:$hamcrest"

        testRuntime "org.objenesis:objenesis:$objenesis"
        testRuntime "ch.qos.logback:logback-core:$logback"
        testRuntime "ch.qos.logback:logback-classic:$logback"
    }

    task cleanlog {
        file('log').listFiles().findAll { it.name.endsWith('.log') }.collect { println("deleting $it"); it.delete() }
    }


    javadoc {
        options.docletpath = configurations.asciidoclet.files.asType(List)
        options.doclet = 'org.asciidoctor.Asciidoclet'
    }
}


def projects = [project(":modules:i18n"), project(":modules:images"), project(":modules:launch"), project(":modules:validation"), project(":modules:eventsystem"),
                project(":modules:reflection"), project(":modules:executor"), project(":modules:util")]

def alldependencyprojects = new ArrayList()
alldependencyprojects.addAll(projects)
alldependencyprojects.add(project(":modules:application"))

task sourceJar(type: Jar) {
    from alldependencyprojects.sourceSets.main.allJava
}

task fullJar(type: Jar) {
    dependsOn projects.build, jar
    baseName "$project.name"
    alldependencyprojects.each { subproject ->
        from subproject.configurations.archives.allArtifacts.files.collect {
            zipTree(it)
        }
    }
}

task fullJavaDoc(type: Javadoc) {
    title = "$project.name $version"

    source = alldependencyprojects.sourceSets.main.allJava

    options.docletpath = configurations.asciidoclet.files.asType(List)
    options.doclet = 'org.asciidoctor.Asciidoclet'
    options.overview = "src/main/java/overview.adoc"
}

task javadocJar(type: Jar, dependsOn: fullJavaDoc) {
    classifier = 'javadoc'
    from fullJavaDoc.destinationDir
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId "$project.name"
            version "$version"

            artifact sourceJar {
                classifier "sources"
            }
            artifact fullJar {

            }

//            artifact(javadocJar) {
//                classifier = 'javadoc'
//            }

            pom.withXml {
                def dependenciesNode = asNode().appendNode('dependencies')

                def added = new HashSet()

                alldependencyprojects.each { project ->
                    project.configurations.compile.allDependencies.each {

                        if (!it.group.equals("de.ks") && !added.contains(it)) {
                            def dependencyNode = dependenciesNode.appendNode('dependency')
                            dependencyNode.appendNode('groupId', it.group)
                            dependencyNode.appendNode('artifactId', it.name)
                            dependencyNode.appendNode('version', it.version)
                            dependencyNode.appendNode('scope', "compile")

                            added.add(it)
                        }
                    }
                    project.configurations.runtime.allDependencies.each {
                        if (!it.group.equals("de.ks") && !added.contains(it)) {
                            def dependencyNode = dependenciesNode.appendNode('dependency')
                            dependencyNode.appendNode('groupId', it.group)
                            dependencyNode.appendNode('artifactId', it.name)
                            dependencyNode.appendNode('version', it.version)
                            dependencyNode.appendNode('scope', "runtime")

                            added.add(it)
                        }
                    }
                }

            }
        }
    }
}