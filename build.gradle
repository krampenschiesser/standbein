/*
 * Copyright [2014] [Christian Loehnert, krampenschiesser@gmail.com]
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

task wrapper(type: Wrapper) {
    gradleVersion = "2.9"
}

allprojects {
    apply plugin: "java"
    group = "de.ks"
    version = "$version"

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    repositories {
        mavenCentral()
        maven {
            url = "http://repository.jboss.org/nexus/content/groups/public"
        }
        maven {
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
    }

    sourceSets {
        main {
            output.resourcesDir = "build/classes/main"
        }
        test {
            output.resourcesDir = "build/classes/test"
        }
    }

    configurations {
        asciidoclet
    }

    dependencies {
        asciidoclet "org.asciidoctor:asciidoclet:$asciidocJavaIntegration"

        compile "com.google.code.findbugs:jsr305:$jsr305"
        compile "org.slf4j:slf4j-api:$slf4j"

//        compile "com.google.inject:guice:$guice"
//        compile 'javax.inject:javax.inject:1'
//        compile "com.google.guava:guava:$guava"
//        compile "org.apache.commons:commons-lang3:$lang3"


        testCompile "junit:junit:$junit"
        testCompile("org.mockito:mockito-core:$mockito") {
            exclude module: "objenesis"
        }
        testCompile "org.hamcrest:hamcrest-all:$hamcrest"

        testRuntime "org.objenesis:objenesis:$objenesis"
        testRuntime "ch.qos.logback:logback-core:$logback"
        testRuntime "ch.qos.logback:logback-classic:$logback"
    }

    task cleanlog {
        file('log').listFiles().findAll { it.name.endsWith('.log') }.collect { println("deleting $it"); it.delete() }
    }


    javadoc {
        options.docletpath = configurations.asciidoclet.files.asType(List)
        options.doclet = 'org.asciidoctor.Asciidoclet'
    }
}

