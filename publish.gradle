def testUtilProjects = [project(":modules:testutil"), project(":modules:application-test-util")]

task testUtilsSourceJar(type: Jar) {
    from testUtilProjects.sourceSets.main.allJava
}
task testUtilJar(type: Jar) {
    dependsOn testUtilProjects.build, jar
    baseName "$project.name-testutil"
    testUtilProjects.each { subproject ->
        from subproject.configurations.archives.allArtifacts.files.collect {
            zipTree(it)
        }
    }
}


def projects = [project(":modules:i18n"), project(":modules:images"), project(":modules:launch"), project(":modules:validation"), project(":modules:eventsystem"),
                project(":modules:reflection"), project(":modules:executor"), project(":modules:util")]

def alldependencyprojects = new ArrayList()
alldependencyprojects.addAll(projects)
alldependencyprojects.add(project(":modules:application"))

task sourceJar(type: Jar) {
    from alldependencyprojects.sourceSets.main.allJava
}


task fullJar(type: Jar) {
    dependsOn projects.build, jar
    baseName "$project.name"
    alldependencyprojects.each { subproject ->
        from subproject.configurations.archives.allArtifacts.files.collect {
            zipTree(it)
        }
    }
}

task fullJavaDoc(type: Javadoc) {
    title = "$project.name $version"

    source = alldependencyprojects.sourceSets.main.allJava

    options.docletpath = configurations.asciidoclet.files.asType(List)
    options.doclet = 'org.asciidoctor.Asciidoclet'
    options.overview = "src/main/java/overview.adoc"
}

task javadocJar(type: Jar, dependsOn: fullJavaDoc) {
    classifier = 'javadoc'
    from fullJavaDoc.destinationDir
}

publishing {
    publications {
        testutil(MavenPublication) {
            artifactId "$project.name-testutil"
            version "$version"

            artifact testUtilsSourceJar {
                classifier "sources"
            }
            artifact testUtilJar {

            }
        }
        standbein(MavenPublication) {
            artifactId "$project.name"
            version "$version"

            artifact sourceJar {
                classifier "sources"
            }
            artifact fullJar {

            }
            pom.withXml {
                def dependenciesNode = asNode().appendNode('dependencies')

                def added = new HashSet()

                alldependencyprojects.each { project ->
                    project.configurations.compile.allDependencies.each {

                        if (!it.group.equals("de.ks") && !added.contains(it)) {
                            def dependencyNode = dependenciesNode.appendNode('dependency')
                            dependencyNode.appendNode('groupId', it.group)
                            dependencyNode.appendNode('artifactId', it.name)
                            dependencyNode.appendNode('version', it.version)
                            dependencyNode.appendNode('scope', "compile")

                            added.add(it)
                        }
                    }
                    project.configurations.runtime.allDependencies.each {
                        if (!it.group.equals("de.ks") && !added.contains(it)) {
                            def dependencyNode = dependenciesNode.appendNode('dependency')
                            dependencyNode.appendNode('groupId', it.group)
                            dependencyNode.appendNode('artifactId', it.name)
                            dependencyNode.appendNode('version', it.version)
                            dependencyNode.appendNode('scope', "runtime")

                            added.add(it)
                        }
                    }
                }

            }
        }
    }
}